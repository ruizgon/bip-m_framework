/* 
 * Copyright (C) 2016 BIP-M Framework.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package entities.malware;

import dump.parsers.interfaces.IEntityParserVisitor;
import entities.Entity;
import entities.EntityAttribute;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import system.utils.IEntityVisitor;

/**
 *
 * @author Gonzalo
 */
public class EntityWindowsFunctionOperation extends Entity {

    public static final String _TAG = "FunctionOperation";
    public static final int _SIZE_STRUCTURE = 0x009; //3 elementos, 0x009 bytes 

    public static List<String> _KeServiceDescriptorInstructions = new ArrayList<String>() {
        {
            /**
             * CALL np E8 CALL rw FF CALL DWORD PTR[rw] FF CALL FAR PTR fp 9A
             */
            add("4B83BC");
            add("4883BC");
            add("4A83BC");
        }
    };
    
    private boolean hooked;
    private String hookType;
    private long _offset;
    private String _offsetHex;

    public EntityWindowsFunctionOperation() {

        try {
            this.setTag(_TAG);

            this.setAttributes(new HashMap<String, EntityAttribute>());

            EntityAttribute a0 = new EntityAttribute("operation", 0x000, "", "int 32", false);
            this.getAttributes().put("operation", a0);
            EntityAttribute a1 = new EntityAttribute("desp", 0x004, "", "int 8", 5, false);
            this.getAttributes().put("desp", a1);
            EntityAttribute a2 = new EntityAttribute("value", 0x008, "", "int 8", false);
            this.getAttributes().put("value", a2);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public boolean isHooked() {
        return hooked;
    }

    public void setHooked(boolean hooked) {
        this.hooked = hooked;
    }

    public String getHookType() {
        return hookType;
    }

    public void setHookType(String hookType) {
        this.hookType = hookType;
    }

    public long getOffset() {
        return _offset;
    }

    public void setOffset(long _offset) {
        this._offset = _offset;
    }

    public String getOffsetHex() {
        return _offsetHex;
    }

    public void setOffsetHex(String _offsetHex) {
        this._offsetHex = _offsetHex;
    }

    @Override
    public void getAttributesContent(long position, Map.Entry<String, EntityAttribute> e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void accept(IEntityVisitor visitor) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void accept(IEntityParserVisitor visitor) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
