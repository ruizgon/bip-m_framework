/* 
 * Copyright (C) 2016 BIP-M Framework.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package entities.malware;

import entities.Entity;
import java.math.BigInteger;
import system.utils.IEntityVisitor;

/**
 *
 * @author Gonzalo
 */
public abstract class EntitySDE extends Entity {

    public static final String _TAG = "ServiceDescriptorEntry";
    private String _entryDescription;
    private boolean _valid;
    private boolean _hooked;
    /**
     * Virtual Address of Array of functions = KiServiceTable
     */
    private BigInteger _functionTableVA;
    private String _functionTableVAHex;
    private int _serviceLimit;
    private int _counterBaseTable;
    private String duplicatedWith; // VA of Original Table

    private EntityWindowsFunction[] _functionArray;

    public EntitySDE() {
        this._valid = true;
        this._hooked = false;
    }

    public String getEntryDescription() {
        return _entryDescription;
    }

    public void setEntryDescription(String entryDescription) {
        this._entryDescription = entryDescription;
    }

    public boolean isValid() {
        return _valid;
    }

    public void setValid(boolean _isValid) {
        this._valid = _isValid;
    }

    public boolean isHooked() {
        return _hooked;
    }

    public void setHooked(boolean _hooked) {
        this._hooked = _hooked;
    }

    public BigInteger getFunctionTableVA() {
        return _functionTableVA;
    }

    public void setFunctionTableVA(BigInteger _functionTableVA) {
        this._functionTableVA = _functionTableVA;
    }

    public String getFunctionTableVAHex() {
        return _functionTableVAHex;
    }

    public void setFunctionTableVAHex(String _functionTableVAHex) {
        this._functionTableVAHex = _functionTableVAHex;
    }

    public int getServiceLimit() {
        return _serviceLimit;
    }

    public void setServiceLimit(int _serviceLimit) {
        this._serviceLimit = _serviceLimit;
    }

    public EntityWindowsFunction[] getFunctionArray() {
        return _functionArray;
    }

    public void setFunctionArray(EntityWindowsFunction[] _functionArray) {
        this._functionArray = _functionArray;
    }

    public int getCounterBaseTable() {
        return _counterBaseTable;
    }

    public void setCounterBaseTable(int _counterBaseTable) {
        this._counterBaseTable = _counterBaseTable;
    }

    public String getDuplicatedWith() {
        return duplicatedWith;
    }

    public void setDuplicatedWith(String duplicatedWith) {
        this.duplicatedWith = duplicatedWith;
    }

    @Override
    public void accept(IEntityVisitor visitor) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
