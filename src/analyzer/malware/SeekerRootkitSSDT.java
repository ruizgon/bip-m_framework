/* 
 * Copyright (C) 2016 BIP-M Framework.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package analyzer.malware;

import analyzer.interfaces.ISeekerPersistence;
import analyzer.libs.SeekerLib;
import analyzer.processes.SeekerProcess;
import entities.Entity;
import entities.lib.EntityLib;
import entities.malware.EntityHook;
import entities.malware.EntityRootkit;
import entities.malware.EntitySDE;
import entities.malware.EntitySSDT;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import output.OutputManagerAnalyzer;
import output.OutputManagerConsole;
import output.OutputManagerException;
import persistence.analyzer_service.PersistenceObject;

/**
 *
 * @author Gonzalo
 */
public abstract class SeekerRootkitSSDT extends SeekerRootkit implements ISeekerPersistence {

    public static final String _MALWARE_TYPE = "SSDT_Hook";

    public static List<String> _ssdt0Dict = new ArrayList<String>() {
        {
            add("ntoskrnl.exe");
            add("ntkrnlpa.exe");
            add("ntkrnlmp.exe");
            add("ntkrpamp.exe");
        }
    };
   
    public static List<String> _ssdt1Dict = new ArrayList<String>() {
        {
            add("win32k.sys");
        }
    };
    
    public static List<String> _ssdt2Dict = new ArrayList<String>() {
        {
            add("spud.sys");
        }
    };
    
    public static List<String> _suspiciousInstructions = new ArrayList<String>() {
        {
            /**
             * CALL np E8 CALL rw FF CALL DWORD PTR[rw] FF CALL FAR PTR fp 9A
             */
            add("E8");
            add("FF");
            add("9A");

            /**
             * JMP SHORT sl	EB JMP np	E9 JMP rmw FF JMP DWORD PTR [rmw] FF JMP
             * FAR PTR fp	EA
             */
            add("EB");
            add("E9");
            add("EA");
        }
    };

    protected List<EntitySSDT> _ssdtList;
    protected List<EntityRootkit> _malwareList;

    public SeekerRootkitSSDT() {
        /**
         * Registra observadores
         */
        this.addObserver(OutputManagerException.getInstance());
        this.addObserver(OutputManagerAnalyzer.getInstance());
        this.addObserver(OutputManagerConsole.getInstance());
    }

    public SeekerRootkitSSDT(PersistenceObject persistenceObject) {
        this.setAService(persistenceObject);

        /**
         * Registra observadores
         */
        this.addObserver(OutputManagerException.getInstance());
        this.addObserver(OutputManagerAnalyzer.getInstance());
        this.addObserver(OutputManagerConsole.getInstance());
    }

    public List<EntitySSDT> getSsdtList() {
        return _ssdtList;
    }

    public void setSsdtList(List<EntitySSDT> _ssdtList) {
        this._ssdtList = _ssdtList;
    }

    public List<EntityRootkit> getMalwareList() {
        return _malwareList;
    }

    public void setMalwareList(List<EntityRootkit> _malwareList) {
        this._malwareList = _malwareList;
    }

    protected SeekerProcess _seekerProcess;
    protected SeekerLib _seekerLib;

    public List<EntityRootkit> getSSDTMalware() {
        List<EntityRootkit> malwareList = null;

        if (this._malwareList != null) {
            malwareList = this._malwareList;
        } else {
            malwareList = new ArrayList<EntityRootkit>();
            for (Entity e : this.getSSDTHooks()) {
                EntityRootkit l = (EntityRootkit) e;
                malwareList.add(l);
                this._malwareList = malwareList;
            }
        }

        return this._malwareList;
    }

    public abstract List<EntityRootkit> getSSDTHooks();

    public abstract List<EntityHook> findPointerReplacementHooks(List<EntityLib> libList, List<EntitySSDT> ssdtList);

    public abstract List<EntityHook> findTableDumplicationHooks(List<EntitySSDT> ssdtList);

    public abstract List<EntityHook> findInLineHooks(List<EntitySSDT> ssdtList);

    public abstract void doCompareFunctions(EntitySDE suspicious, EntitySDE knownSSDT, String hookType);

    public abstract void doAnalizeFunctionOperations(EntitySDE sde, String hookType);

    public SeekerProcess getSeekerProcess() {
        return _seekerProcess;
    }

    public void setSeekerProcess(SeekerProcess _seekerProcess) {
        this._seekerProcess = _seekerProcess;
    }

    @Override
    public String persistResults(Map<Object, Entity> entities) {
        String respuesta = "";

        try {
            respuesta = this.getAService().loadContent(entities);
        } catch (Exception ex) {
            ex.printStackTrace();
            respuesta = "Error";
        }

        return respuesta;
    }

}
